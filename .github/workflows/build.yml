name: Build

on:
  workflow_call:

permissions:
  id-token: write
  contents: read 
  packages: write
  
jobs:
  build:
    name: Build container and push to ECR
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup BuildX
      uses: docker/setup-buildx-action@v1.6.0

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Get ENV variables
      uses: attopartners/deploy-workflows/.github/actions/setvars.yml@master
      with:
        varFilePath: ./.github/variables/${{ steps.extract_branch.outputs.branch }}.env
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: ${{ env.STS_ROLE }}
        role-session-name: buildsession
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,format=long,prefix=
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-single-buildx-standard
        restore-keys: |
          ${{ runner.os }}-single-buildx

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        build-args: |
          environment=${{ env.ENVIRONMENT }}
          AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Get Slack Webhook URL from AWS Secrets Manager
      uses: abhilash1in/aws-secrets-manager-action@v1.1.0
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        secrets: |
          slack
        parse-json: true
      if: failure()

    - name: Slack Notification
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        channel: '#deployment'
      env:
        SLACK_WEBHOOK_URL: ${{ env.SLACK_SLACK_WEBHOOK_URL }} # required
      if: failure()

