name: Build

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
    inputs:
      ecr_repository:
        description: 'ECR repository name'
        required: true
        type: string
      environment:
        default: 'production'
        type: string
      function_name:
        description: 'Lambda function name'
        required: true
        type: string
    outputs:
      image:
        description: 'Image name'
        value: ${{ jobs.build.outputs.image }}

permissions:
  id-token: write
  contents: read 
  packages: write
  
jobs:
  lambda:
    name: Build container and push to ECR
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.meta.outputs.tags }}

    steps:
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup BuildX
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: ${{ secrets.AWS_STS_ROLE }}
        role-session-name: buildsession
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,format=long,prefix=


    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        pull: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          environment=${{ inputs.environment }}
          AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}


    - name: Update Lambda
      run: |
        aws lambda update-function-code --function-name ${{ inputs.function_name }} --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}:${{ github.event.after }} > /dev/null

    - name: Slack Notification 
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        channel: '#deployment'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: ${{ always() }}
